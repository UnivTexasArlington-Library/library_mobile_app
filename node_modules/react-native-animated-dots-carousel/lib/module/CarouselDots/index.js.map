{"version":3,"sources":["index.tsx"],"names":["React","useCallback","useEffect","useRef","useState","View","ScrollView","usePrevious","InvisibleFiller","Dot","styles","calculateDotSize","dot","size","margin","calculateDecreasingDotSize","config","quantity","calculateIndicatorDotSize","maxIndicators","activeIndicatorConfig","inactiveIndicatorConfig","calculateOffsetSize","decreasingDot","offset","minimumSize","length","result","reduce","acc","totalSize","CarouselDots","currentIndex","decreasingDots","verticalOrientation","interpolateOpacityAndColor","refScrollView","curIndex","setCurIndex","positiveMomentum","prevIndex","carouselState","setCarouselState","state","list","Array","keys","scrollTo","index","current","moveTo","animated","x","internalState","finalState","containerSize","container","map","i","invisibleFillerSize","flex","height","flexDirection","width","scrollContainer"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { View, ScrollView } from 'react-native';\n\nimport usePrevious from './use-previous';\n\nimport InvisibleFiller from './InvisibleFiller';\nimport Dot from './Dot';\nimport { CarouselState, DecreasingDot, DotConfig } from './interface';\nimport styles from './styles';\n\nexport interface CarouselDotsProps {\n  length: number;\n  currentIndex: number;\n  maxIndicators: number;\n  activeIndicatorConfig: DotConfig;\n  inactiveIndicatorConfig: DotConfig;\n  decreasingDots: DecreasingDot[];\n  verticalOrientation?: boolean;\n  interpolateOpacityAndColor?: boolean;\n}\n\nconst calculateDotSize = (dot: DotConfig): number => dot.size + 2 * dot.margin;\nconst calculateDecreasingDotSize = (dot: DecreasingDot): number => {\n  return calculateDotSize(dot.config) * (dot.quantity * 2);\n};\nconst calculateIndicatorDotSize = (\n  maxIndicators: number,\n  activeIndicatorConfig: DotConfig,\n  inactiveIndicatorConfig: DotConfig\n): number => {\n  return (\n    calculateDotSize(activeIndicatorConfig) +\n    calculateDotSize(inactiveIndicatorConfig) * (maxIndicators - 1)\n  );\n};\n\nconst calculateOffsetSize = (\n  decreasingDot: DecreasingDot[],\n  offset: number\n): number => {\n  const minimumSize = calculateDotSize(\n    decreasingDot[decreasingDot.length - 1].config\n  );\n  const result = decreasingDot.reduce(\n    (acc, dot) => {\n      if (acc.offset === 0) return acc;\n      if (acc.offset - dot.quantity <= 0) {\n        return {\n          offset: 0,\n          totalSize: acc.totalSize + calculateDotSize(dot.config) * acc.offset,\n        };\n      }\n      return {\n        offset: acc.offset - dot.quantity,\n        totalSize: acc.totalSize + calculateDotSize(dot.config) * dot.quantity,\n      };\n    },\n    { offset, totalSize: 0 }\n  );\n  return result.totalSize + result.offset * minimumSize;\n};\nconst CarouselDots = ({\n  length,\n  currentIndex,\n  maxIndicators,\n  activeIndicatorConfig,\n  inactiveIndicatorConfig,\n  decreasingDots,\n  verticalOrientation = false,\n  interpolateOpacityAndColor = true,\n}: CarouselDotsProps): JSX.Element => {\n  const refScrollView = useRef<ScrollView>(null);\n  const [curIndex, setCurIndex] = useState<number>(currentIndex);\n  const positiveMomentum = useRef<boolean>(false);\n  const prevIndex = usePrevious(curIndex, curIndex);\n  const [carouselState, setCarouselState] = useState<CarouselState>({\n    currentIndex,\n    state: 1,\n  });\n  const list = [...Array(length).keys()];\n  const scrollTo = useCallback(\n    (index: number): void => {\n      if (!refScrollView.current) return;\n      const moveTo = positiveMomentum.current\n        ? calculateOffsetSize(decreasingDots, index - maxIndicators + 1)\n        : calculateOffsetSize(decreasingDots, index);\n\n      refScrollView.current.scrollTo({\n        animated: true,\n        x: moveTo,\n      });\n    },\n    [decreasingDots, maxIndicators]\n  );\n  useEffect(() => {\n    setCurIndex(currentIndex);\n  }, [currentIndex]);\n  useEffect(() => {\n    positiveMomentum.current = curIndex - prevIndex > 0;\n    let internalState = carouselState.state;\n    internalState += curIndex - prevIndex;\n    const finalState = internalState;\n    if (internalState > maxIndicators) internalState = maxIndicators;\n    if (internalState < 1) internalState = 1;\n    if (internalState) {\n      setCarouselState({\n        currentIndex: curIndex,\n        state: internalState,\n      });\n    }\n\n    if (\n      length > maxIndicators &&\n      (finalState > maxIndicators || finalState < 1)\n    )\n      scrollTo(curIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [curIndex, length, maxIndicators, scrollTo]);\n  const containerSize =\n    decreasingDots.reduce(\n      (acc, current) => calculateDecreasingDotSize(current) + acc,\n      0\n    ) +\n    calculateIndicatorDotSize(\n      maxIndicators,\n      activeIndicatorConfig,\n      inactiveIndicatorConfig\n    );\n  if (length <= maxIndicators) {\n    return (\n      <View style={styles.container}>\n        {list.map((i) => {\n          return (\n            <Dot\n              key={i}\n              index={i}\n              maxIndicators={maxIndicators}\n              activeIndicatorConfig={activeIndicatorConfig}\n              inactiveIndicatorConfig={inactiveIndicatorConfig}\n              verticalOrientation={verticalOrientation}\n              decreasingDots={decreasingDots}\n              carouselState={carouselState}\n              interpolateOpacityAndColor={interpolateOpacityAndColor}\n            />\n          );\n        })}\n      </View>\n    );\n  }\n  const invisibleFillerSize =\n    decreasingDots.reduce(\n      (acc, current) => calculateDecreasingDotSize(current) + acc,\n      0\n    ) / 2;\n  return (\n    <View\n      style={[\n        verticalOrientation\n          ? { flex: 1, height: containerSize }\n          : { flex: 1, flexDirection: 'row', width: containerSize },\n      ]}\n    >\n      <ScrollView\n        ref={refScrollView}\n        contentContainerStyle={styles.scrollContainer}\n        bounces={false}\n        horizontal={!verticalOrientation}\n        scrollEnabled={false}\n        showsVerticalScrollIndicator={false}\n        showsHorizontalScrollIndicator={false}\n      >\n        <InvisibleFiller\n          size={invisibleFillerSize}\n          verticalOrientation={verticalOrientation}\n        />\n        {list.map((i) => {\n          return (\n            <Dot\n              key={i}\n              index={i}\n              maxIndicators={maxIndicators}\n              activeIndicatorConfig={activeIndicatorConfig}\n              inactiveIndicatorConfig={inactiveIndicatorConfig}\n              decreasingDots={decreasingDots}\n              verticalOrientation={verticalOrientation}\n              carouselState={carouselState}\n              interpolateOpacityAndColor={interpolateOpacityAndColor}\n            />\n          );\n        })}\n        <InvisibleFiller\n          size={invisibleFillerSize}\n          verticalOrientation={verticalOrientation}\n        />\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default CarouselDots;\n"]}