{"version":3,"sources":["index.tsx"],"names":["React","useEffect","useRef","useState","Animated","usePrevious","getDotStyle","Dot","maxIndicators","activeIndicatorConfig","inactiveIndicatorConfig","decreasingDots","index","carouselState","verticalOrientation","interpolateOpacityAndColor","currentIndex","state","type","setType","indicatorState","prevType","animatedValue","Value","current","setValue","timing","duration","toValue","useNativeDriver","start","size","interpolate","inputRange","outputRange","backgroundColor","color","borderColor","borderRadius","borderWidth","marginHorizontal","margin","marginVertical","opacity","height","width"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Animated } from 'react-native';\n\nimport usePrevious from '../use-previous';\n\n//RECHECK THIS WAY OF IMPORTING TYPES FOR COMPATIBILITY\nimport { CarouselState, DecreasingDot, DotConfig } from '../interface';\n\nimport { getDotStyle } from './utils';\n\ninterface Dot {\n  maxIndicators: number;\n  activeIndicatorConfig: DotConfig;\n  inactiveIndicatorConfig: DotConfig;\n  decreasingDots: DecreasingDot[];\n  index: number;\n  carouselState: CarouselState;\n  verticalOrientation: boolean;\n  interpolateOpacityAndColor: boolean;\n}\n\nconst Dot = ({\n  maxIndicators,\n  activeIndicatorConfig,\n  inactiveIndicatorConfig,\n  decreasingDots,\n  index,\n  carouselState,\n  verticalOrientation,\n  interpolateOpacityAndColor,\n}: Dot): JSX.Element => {\n  const { currentIndex, state } = carouselState;\n  const [type, setType] = useState(\n    getDotStyle({\n      activeIndicatorConfig,\n      currentIndex,\n      decreasingDots,\n      inactiveIndicatorConfig,\n      index,\n      indicatorState: state,\n      maxIndicators,\n    })\n  );\n  const prevType = usePrevious(type, type);\n  const animatedValue = useRef<Animated.Value>(new Animated.Value(0));\n\n  useEffect(() => {\n    setType(\n      getDotStyle({\n        activeIndicatorConfig,\n        currentIndex,\n        decreasingDots,\n        inactiveIndicatorConfig,\n        index,\n        indicatorState: state,\n        maxIndicators,\n      })\n    );\n  }, [\n    activeIndicatorConfig,\n    currentIndex,\n    decreasingDots,\n    inactiveIndicatorConfig,\n    index,\n    maxIndicators,\n    state,\n  ]);\n\n  useEffect(() => {\n    animatedValue.current.setValue(0);\n    Animated.timing(animatedValue.current, {\n      duration: 300,\n      toValue: 1,\n      useNativeDriver: false,\n    }).start();\n  }, [currentIndex]);\n\n  const size = animatedValue.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: [prevType.size, type.size],\n  });\n\n  return (\n    <Animated.View\n      style={[\n        {\n          backgroundColor: interpolateOpacityAndColor\n            ? animatedValue.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [prevType.color, type.color],\n              })\n            : type.color,\n          borderColor: type.borderColor,\n          borderRadius: type.size,\n          borderWidth: type.borderWidth,\n          marginHorizontal: verticalOrientation ? 0 : type.margin,\n          marginVertical: verticalOrientation ? type.margin : 0,\n          opacity: interpolateOpacityAndColor\n            ? animatedValue.current.interpolate({\n                inputRange: [0, 1],\n                outputRange: [prevType.opacity, type.opacity],\n              })\n            : type.opacity,\n        },\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    />\n  );\n};\n\nexport default Dot;\n"]}