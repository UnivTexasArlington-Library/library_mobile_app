"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _usePrevious = _interopRequireDefault(require("../use-previous"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react-native/no-inline-styles */
const Dot = ({
  maxIndicators,
  activeIndicatorConfig,
  inactiveIndicatorConfig,
  decreasingDots,
  index,
  carouselState,
  verticalOrientation,
  interpolateOpacityAndColor
}) => {
  const {
    currentIndex,
    state
  } = carouselState;
  const [type, setType] = (0, _react.useState)((0, _utils.getDotStyle)({
    activeIndicatorConfig,
    currentIndex,
    decreasingDots,
    inactiveIndicatorConfig,
    index,
    indicatorState: state,
    maxIndicators
  }));
  const prevType = (0, _usePrevious.default)(type, type);
  const animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0));
  (0, _react.useEffect)(() => {
    setType((0, _utils.getDotStyle)({
      activeIndicatorConfig,
      currentIndex,
      decreasingDots,
      inactiveIndicatorConfig,
      index,
      indicatorState: state,
      maxIndicators
    }));
  }, [activeIndicatorConfig, currentIndex, decreasingDots, inactiveIndicatorConfig, index, maxIndicators, state]);
  (0, _react.useEffect)(() => {
    animatedValue.current.setValue(0);

    _reactNative.Animated.timing(animatedValue.current, {
      duration: 300,
      toValue: 1,
      useNativeDriver: false
    }).start();
  }, [currentIndex]);
  const size = animatedValue.current.interpolate({
    inputRange: [0, 1],
    outputRange: [prevType.size, type.size]
  });
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [{
      backgroundColor: interpolateOpacityAndColor ? animatedValue.current.interpolate({
        inputRange: [0, 1],
        outputRange: [prevType.color, type.color]
      }) : type.color,
      borderColor: type.borderColor,
      borderRadius: type.size,
      borderWidth: type.borderWidth,
      marginHorizontal: verticalOrientation ? 0 : type.margin,
      marginVertical: verticalOrientation ? type.margin : 0,
      opacity: interpolateOpacityAndColor ? animatedValue.current.interpolate({
        inputRange: [0, 1],
        outputRange: [prevType.opacity, type.opacity]
      }) : type.opacity
    }, {
      height: size,
      width: size
    }]
  });
};

var _default = Dot;
exports.default = _default;
//# sourceMappingURL=index.js.map